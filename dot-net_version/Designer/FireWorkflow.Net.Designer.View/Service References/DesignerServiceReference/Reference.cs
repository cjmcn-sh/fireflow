//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.239
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 4.0.50826.0
// 
namespace FireWorkflow.Net.Designer.View.DesignerServiceReference {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ProcessInstanceTrace", Namespace="http://schemas.datacontract.org/2004/07/FireWorkflow.Net.Engine.Impl")]
    public partial class ProcessInstanceTrace : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string EdgeIdField;
        
        private string FromNodeIdField;
        
        private string ToNodeIdField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EdgeId {
            get {
                return this.EdgeIdField;
            }
            set {
                if ((object.ReferenceEquals(this.EdgeIdField, value) != true)) {
                    this.EdgeIdField = value;
                    this.RaisePropertyChanged("EdgeId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FromNodeId {
            get {
                return this.FromNodeIdField;
            }
            set {
                if ((object.ReferenceEquals(this.FromNodeIdField, value) != true)) {
                    this.FromNodeIdField = value;
                    this.RaisePropertyChanged("FromNodeId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ToNodeId {
            get {
                return this.ToNodeIdField;
            }
            set {
                if ((object.ReferenceEquals(this.ToNodeIdField, value) != true)) {
                    this.ToNodeIdField = value;
                    this.RaisePropertyChanged("ToNodeId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="DesignerServiceReference.IDesignerService")]
    public interface IDesignerService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IDesignerService/GetWorkflowProcessXml", ReplyAction="http://tempuri.org/IDesignerService/GetWorkflowProcessXmlResponse")]
        System.IAsyncResult BeginGetWorkflowProcessXml(string id, System.AsyncCallback callback, object asyncState);
        
        string EndGetWorkflowProcessXml(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IDesignerService/GetWorkflowProcessXmlProcessIdOrVersion", ReplyAction="http://tempuri.org/IDesignerService/GetWorkflowProcessXmlProcessIdOrVersionRespon" +
            "se")]
        System.IAsyncResult BeginGetWorkflowProcessXmlProcessIdOrVersion(string processID, int version, System.AsyncCallback callback, object asyncState);
        
        string EndGetWorkflowProcessXmlProcessIdOrVersion(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IDesignerService/GetProcessInstanceTraceXml", ReplyAction="http://tempuri.org/IDesignerService/GetProcessInstanceTraceXmlResponse")]
        System.IAsyncResult BeginGetProcessInstanceTraceXml(string processInstanceId, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<FireWorkflow.Net.Designer.View.DesignerServiceReference.ProcessInstanceTrace> EndGetProcessInstanceTraceXml(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IDesignerServiceChannel : FireWorkflow.Net.Designer.View.DesignerServiceReference.IDesignerService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetWorkflowProcessXmlCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetWorkflowProcessXmlCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetWorkflowProcessXmlProcessIdOrVersionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetWorkflowProcessXmlProcessIdOrVersionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetProcessInstanceTraceXmlCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetProcessInstanceTraceXmlCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<FireWorkflow.Net.Designer.View.DesignerServiceReference.ProcessInstanceTrace> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<FireWorkflow.Net.Designer.View.DesignerServiceReference.ProcessInstanceTrace>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DesignerServiceClient : System.ServiceModel.ClientBase<FireWorkflow.Net.Designer.View.DesignerServiceReference.IDesignerService>, FireWorkflow.Net.Designer.View.DesignerServiceReference.IDesignerService {
        
        private BeginOperationDelegate onBeginGetWorkflowProcessXmlDelegate;
        
        private EndOperationDelegate onEndGetWorkflowProcessXmlDelegate;
        
        private System.Threading.SendOrPostCallback onGetWorkflowProcessXmlCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetWorkflowProcessXmlProcessIdOrVersionDelegate;
        
        private EndOperationDelegate onEndGetWorkflowProcessXmlProcessIdOrVersionDelegate;
        
        private System.Threading.SendOrPostCallback onGetWorkflowProcessXmlProcessIdOrVersionCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetProcessInstanceTraceXmlDelegate;
        
        private EndOperationDelegate onEndGetProcessInstanceTraceXmlDelegate;
        
        private System.Threading.SendOrPostCallback onGetProcessInstanceTraceXmlCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public DesignerServiceClient() {
        }
        
        public DesignerServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public DesignerServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DesignerServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DesignerServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("无法设置 CookieContainer。请确保绑定包含 HttpCookieContainerBindingElement。");
                }
            }
        }
        
        public event System.EventHandler<GetWorkflowProcessXmlCompletedEventArgs> GetWorkflowProcessXmlCompleted;
        
        public event System.EventHandler<GetWorkflowProcessXmlProcessIdOrVersionCompletedEventArgs> GetWorkflowProcessXmlProcessIdOrVersionCompleted;
        
        public event System.EventHandler<GetProcessInstanceTraceXmlCompletedEventArgs> GetProcessInstanceTraceXmlCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult FireWorkflow.Net.Designer.View.DesignerServiceReference.IDesignerService.BeginGetWorkflowProcessXml(string id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetWorkflowProcessXml(id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string FireWorkflow.Net.Designer.View.DesignerServiceReference.IDesignerService.EndGetWorkflowProcessXml(System.IAsyncResult result) {
            return base.Channel.EndGetWorkflowProcessXml(result);
        }
        
        private System.IAsyncResult OnBeginGetWorkflowProcessXml(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string id = ((string)(inValues[0]));
            return ((FireWorkflow.Net.Designer.View.DesignerServiceReference.IDesignerService)(this)).BeginGetWorkflowProcessXml(id, callback, asyncState);
        }
        
        private object[] OnEndGetWorkflowProcessXml(System.IAsyncResult result) {
            string retVal = ((FireWorkflow.Net.Designer.View.DesignerServiceReference.IDesignerService)(this)).EndGetWorkflowProcessXml(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetWorkflowProcessXmlCompleted(object state) {
            if ((this.GetWorkflowProcessXmlCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetWorkflowProcessXmlCompleted(this, new GetWorkflowProcessXmlCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetWorkflowProcessXmlAsync(string id) {
            this.GetWorkflowProcessXmlAsync(id, null);
        }
        
        public void GetWorkflowProcessXmlAsync(string id, object userState) {
            if ((this.onBeginGetWorkflowProcessXmlDelegate == null)) {
                this.onBeginGetWorkflowProcessXmlDelegate = new BeginOperationDelegate(this.OnBeginGetWorkflowProcessXml);
            }
            if ((this.onEndGetWorkflowProcessXmlDelegate == null)) {
                this.onEndGetWorkflowProcessXmlDelegate = new EndOperationDelegate(this.OnEndGetWorkflowProcessXml);
            }
            if ((this.onGetWorkflowProcessXmlCompletedDelegate == null)) {
                this.onGetWorkflowProcessXmlCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetWorkflowProcessXmlCompleted);
            }
            base.InvokeAsync(this.onBeginGetWorkflowProcessXmlDelegate, new object[] {
                        id}, this.onEndGetWorkflowProcessXmlDelegate, this.onGetWorkflowProcessXmlCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult FireWorkflow.Net.Designer.View.DesignerServiceReference.IDesignerService.BeginGetWorkflowProcessXmlProcessIdOrVersion(string processID, int version, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetWorkflowProcessXmlProcessIdOrVersion(processID, version, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string FireWorkflow.Net.Designer.View.DesignerServiceReference.IDesignerService.EndGetWorkflowProcessXmlProcessIdOrVersion(System.IAsyncResult result) {
            return base.Channel.EndGetWorkflowProcessXmlProcessIdOrVersion(result);
        }
        
        private System.IAsyncResult OnBeginGetWorkflowProcessXmlProcessIdOrVersion(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string processID = ((string)(inValues[0]));
            int version = ((int)(inValues[1]));
            return ((FireWorkflow.Net.Designer.View.DesignerServiceReference.IDesignerService)(this)).BeginGetWorkflowProcessXmlProcessIdOrVersion(processID, version, callback, asyncState);
        }
        
        private object[] OnEndGetWorkflowProcessXmlProcessIdOrVersion(System.IAsyncResult result) {
            string retVal = ((FireWorkflow.Net.Designer.View.DesignerServiceReference.IDesignerService)(this)).EndGetWorkflowProcessXmlProcessIdOrVersion(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetWorkflowProcessXmlProcessIdOrVersionCompleted(object state) {
            if ((this.GetWorkflowProcessXmlProcessIdOrVersionCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetWorkflowProcessXmlProcessIdOrVersionCompleted(this, new GetWorkflowProcessXmlProcessIdOrVersionCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetWorkflowProcessXmlProcessIdOrVersionAsync(string processID, int version) {
            this.GetWorkflowProcessXmlProcessIdOrVersionAsync(processID, version, null);
        }
        
        public void GetWorkflowProcessXmlProcessIdOrVersionAsync(string processID, int version, object userState) {
            if ((this.onBeginGetWorkflowProcessXmlProcessIdOrVersionDelegate == null)) {
                this.onBeginGetWorkflowProcessXmlProcessIdOrVersionDelegate = new BeginOperationDelegate(this.OnBeginGetWorkflowProcessXmlProcessIdOrVersion);
            }
            if ((this.onEndGetWorkflowProcessXmlProcessIdOrVersionDelegate == null)) {
                this.onEndGetWorkflowProcessXmlProcessIdOrVersionDelegate = new EndOperationDelegate(this.OnEndGetWorkflowProcessXmlProcessIdOrVersion);
            }
            if ((this.onGetWorkflowProcessXmlProcessIdOrVersionCompletedDelegate == null)) {
                this.onGetWorkflowProcessXmlProcessIdOrVersionCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetWorkflowProcessXmlProcessIdOrVersionCompleted);
            }
            base.InvokeAsync(this.onBeginGetWorkflowProcessXmlProcessIdOrVersionDelegate, new object[] {
                        processID,
                        version}, this.onEndGetWorkflowProcessXmlProcessIdOrVersionDelegate, this.onGetWorkflowProcessXmlProcessIdOrVersionCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult FireWorkflow.Net.Designer.View.DesignerServiceReference.IDesignerService.BeginGetProcessInstanceTraceXml(string processInstanceId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetProcessInstanceTraceXml(processInstanceId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<FireWorkflow.Net.Designer.View.DesignerServiceReference.ProcessInstanceTrace> FireWorkflow.Net.Designer.View.DesignerServiceReference.IDesignerService.EndGetProcessInstanceTraceXml(System.IAsyncResult result) {
            return base.Channel.EndGetProcessInstanceTraceXml(result);
        }
        
        private System.IAsyncResult OnBeginGetProcessInstanceTraceXml(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string processInstanceId = ((string)(inValues[0]));
            return ((FireWorkflow.Net.Designer.View.DesignerServiceReference.IDesignerService)(this)).BeginGetProcessInstanceTraceXml(processInstanceId, callback, asyncState);
        }
        
        private object[] OnEndGetProcessInstanceTraceXml(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<FireWorkflow.Net.Designer.View.DesignerServiceReference.ProcessInstanceTrace> retVal = ((FireWorkflow.Net.Designer.View.DesignerServiceReference.IDesignerService)(this)).EndGetProcessInstanceTraceXml(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetProcessInstanceTraceXmlCompleted(object state) {
            if ((this.GetProcessInstanceTraceXmlCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetProcessInstanceTraceXmlCompleted(this, new GetProcessInstanceTraceXmlCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetProcessInstanceTraceXmlAsync(string processInstanceId) {
            this.GetProcessInstanceTraceXmlAsync(processInstanceId, null);
        }
        
        public void GetProcessInstanceTraceXmlAsync(string processInstanceId, object userState) {
            if ((this.onBeginGetProcessInstanceTraceXmlDelegate == null)) {
                this.onBeginGetProcessInstanceTraceXmlDelegate = new BeginOperationDelegate(this.OnBeginGetProcessInstanceTraceXml);
            }
            if ((this.onEndGetProcessInstanceTraceXmlDelegate == null)) {
                this.onEndGetProcessInstanceTraceXmlDelegate = new EndOperationDelegate(this.OnEndGetProcessInstanceTraceXml);
            }
            if ((this.onGetProcessInstanceTraceXmlCompletedDelegate == null)) {
                this.onGetProcessInstanceTraceXmlCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetProcessInstanceTraceXmlCompleted);
            }
            base.InvokeAsync(this.onBeginGetProcessInstanceTraceXmlDelegate, new object[] {
                        processInstanceId}, this.onEndGetProcessInstanceTraceXmlDelegate, this.onGetProcessInstanceTraceXmlCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override FireWorkflow.Net.Designer.View.DesignerServiceReference.IDesignerService CreateChannel() {
            return new DesignerServiceClientChannel(this);
        }
        
        private class DesignerServiceClientChannel : ChannelBase<FireWorkflow.Net.Designer.View.DesignerServiceReference.IDesignerService>, FireWorkflow.Net.Designer.View.DesignerServiceReference.IDesignerService {
            
            public DesignerServiceClientChannel(System.ServiceModel.ClientBase<FireWorkflow.Net.Designer.View.DesignerServiceReference.IDesignerService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginGetWorkflowProcessXml(string id, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = id;
                System.IAsyncResult _result = base.BeginInvoke("GetWorkflowProcessXml", _args, callback, asyncState);
                return _result;
            }
            
            public string EndGetWorkflowProcessXml(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("GetWorkflowProcessXml", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetWorkflowProcessXmlProcessIdOrVersion(string processID, int version, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = processID;
                _args[1] = version;
                System.IAsyncResult _result = base.BeginInvoke("GetWorkflowProcessXmlProcessIdOrVersion", _args, callback, asyncState);
                return _result;
            }
            
            public string EndGetWorkflowProcessXmlProcessIdOrVersion(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("GetWorkflowProcessXmlProcessIdOrVersion", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetProcessInstanceTraceXml(string processInstanceId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = processInstanceId;
                System.IAsyncResult _result = base.BeginInvoke("GetProcessInstanceTraceXml", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<FireWorkflow.Net.Designer.View.DesignerServiceReference.ProcessInstanceTrace> EndGetProcessInstanceTraceXml(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<FireWorkflow.Net.Designer.View.DesignerServiceReference.ProcessInstanceTrace> _result = ((System.Collections.ObjectModel.ObservableCollection<FireWorkflow.Net.Designer.View.DesignerServiceReference.ProcessInstanceTrace>)(base.EndInvoke("GetProcessInstanceTraceXml", _args, result)));
                return _result;
            }
        }
    }
}
